# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# The `BigInt` scalar type represents non-fractional signed whole numeric values.
scalar Long

# The `Upload` scalar type represents a file upload.
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input LongFilterInput {
  and: [Long]
  or: [Long]
  not: LongFilterInput
  eq: Long
  eqi: Long
  ne: Long
  startsWith: Long
  endsWith: Long
  contains: Long
  notContains: Long
  containsi: Long
  notContainsi: Long
  gt: Long
  gte: Long
  lt: Long
  lte: Long
  null: Boolean
  notNull: Boolean
  in: [Long]
  notIn: [Long]
  between: [Long]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  folder: ID
  folderPath: String
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  pathId: IntFilterInput
  parent: UploadFolderFiltersInput
  children: UploadFolderFiltersInput
  files: UploadFileFiltersInput
  path: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFolderFiltersInput]
  or: [UploadFolderFiltersInput]
  not: UploadFolderFiltersInput
}

input UploadFolderInput {
  name: String
  pathId: Int
  parent: ID
  children: [ID]
  files: [ID]
  path: String
}

type UploadFolder {
  name: String!
  pathId: Int!
  parent: UploadFolderEntityResponse
  children(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderRelationResponseCollection
  files(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  path: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFolderEntity {
  id: ID
  attributes: UploadFolder
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  student: StudentFiltersInput
  lecturer: LecturerFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  student: ID
  lecturer: ID
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  student: StudentEntityResponse
  lecturer: LecturerEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input CompanyFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  address: StringFilterInput
  people: PersonFiltersInput
  projects: ProjectFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [CompanyFiltersInput]
  or: [CompanyFiltersInput]
  not: CompanyFiltersInput
}

input CompanyInput {
  name: String
  address: String
  people: [ID]
  projects: [ID]
  publishedAt: DateTime
}

type Company {
  name: String!
  address: String
  people(
    filters: PersonFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PersonRelationResponseCollection
  projects(
    filters: ProjectFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ProjectRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type CompanyEntity {
  id: ID
  attributes: Company
}

type CompanyEntityResponse {
  data: CompanyEntity
}

type CompanyEntityResponseCollection {
  data: [CompanyEntity!]!
  meta: ResponseCollectionMeta!
}

type CompanyRelationResponseCollection {
  data: [CompanyEntity!]!
}

input DepartmentFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  lecturers: LecturerFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [DepartmentFiltersInput]
  or: [DepartmentFiltersInput]
  not: DepartmentFiltersInput
}

input DepartmentInput {
  name: String
  lecturers: [ID]
  publishedAt: DateTime
}

type Department {
  name: String
  lecturers(
    filters: LecturerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): LecturerRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type DepartmentEntity {
  id: ID
  attributes: Department
}

type DepartmentEntityResponse {
  data: DepartmentEntity
}

type DepartmentEntityResponseCollection {
  data: [DepartmentEntity!]!
  meta: ResponseCollectionMeta!
}

input DocActionFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [DocActionFiltersInput]
  or: [DocActionFiltersInput]
  not: DocActionFiltersInput
}

input DocActionInput {
  name: String
  description: String
  publishedAt: DateTime
}

type DocAction {
  name: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type DocActionEntity {
  id: ID
  attributes: DocAction
}

type DocActionEntityResponse {
  data: DocActionEntity
}

type DocActionEntityResponseCollection {
  data: [DocActionEntity!]!
  meta: ResponseCollectionMeta!
}

input DocLogFiltersInput {
  id: IDFilterInput
  timestamp: LongFilterInput
  action: DocActionFiltersInput
  by: PersonFiltersInput
  document: DocumentFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [DocLogFiltersInput]
  or: [DocLogFiltersInput]
  not: DocLogFiltersInput
}

input DocLogInput {
  timestamp: Long
  action: ID
  by: ID
  document: ID
  publishedAt: DateTime
}

type DocLog {
  timestamp: Long
  action: DocActionEntityResponse
  by: PersonEntityResponse
  document: DocumentEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type DocLogEntity {
  id: ID
  attributes: DocLog
}

type DocLogEntityResponse {
  data: DocLogEntity
}

type DocLogEntityResponseCollection {
  data: [DocLogEntity!]!
  meta: ResponseCollectionMeta!
}

type DocLogRelationResponseCollection {
  data: [DocLogEntity!]!
}

input DocStatusFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  document: DocumentFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [DocStatusFiltersInput]
  or: [DocStatusFiltersInput]
  not: DocStatusFiltersInput
}

input DocStatusInput {
  name: String
  description: String
  document: ID
  publishedAt: DateTime
}

type DocStatus {
  name: String!
  description: String
  document: DocumentEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type DocStatusEntity {
  id: ID
  attributes: DocStatus
}

type DocStatusEntityResponse {
  data: DocStatusEntity
}

type DocStatusEntityResponseCollection {
  data: [DocStatusEntity!]!
  meta: ResponseCollectionMeta!
}

input DocumentFiltersInput {
  id: IDFilterInput
  readers: PersonFiltersInput
  writers: PersonFiltersInput
  title: StringFilterInput
  project: ProjectFiltersInput
  approvedBy: PersonFiltersInput
  documentLogs: DocLogFiltersInput
  status: DocStatusFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [DocumentFiltersInput]
  or: [DocumentFiltersInput]
  not: DocumentFiltersInput
}

input DocumentInput {
  readers: [ID]
  writers: [ID]
  title: String
  project: ID
  approvedBy: [ID]
  documentLogs: [ID]
  status: ID
  file: ID
  publishedAt: DateTime
}

type Document {
  readers(
    filters: PersonFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PersonRelationResponseCollection
  writers(
    filters: PersonFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PersonRelationResponseCollection
  title: String
  project: ProjectEntityResponse
  approvedBy(
    filters: PersonFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PersonRelationResponseCollection
  documentLogs(
    filters: DocLogFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DocLogRelationResponseCollection
  status: DocStatusEntityResponse
  file: UploadFileEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type DocumentEntity {
  id: ID
  attributes: Document
}

type DocumentEntityResponse {
  data: DocumentEntity
}

type DocumentEntityResponseCollection {
  data: [DocumentEntity!]!
  meta: ResponseCollectionMeta!
}

type DocumentRelationResponseCollection {
  data: [DocumentEntity!]!
}

enum ENUM_LECTURER_POSITION {
  KETUA_JURUSAN
  KETUA_PRODI
  KOORDINATOR
}

input LecturerFiltersInput {
  id: IDFilterInput
  position: StringFilterInput
  department: DepartmentFiltersInput
  studyProgram: StudyProgramFiltersInput
  user: UsersPermissionsUserFiltersInput
  person: PersonFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [LecturerFiltersInput]
  or: [LecturerFiltersInput]
  not: LecturerFiltersInput
}

input LecturerInput {
  position: ENUM_LECTURER_POSITION
  department: ID
  studyProgram: ID
  user: ID
  person: ID
  publishedAt: DateTime
}

type Lecturer {
  position: ENUM_LECTURER_POSITION
  department: DepartmentEntityResponse
  studyProgram: StudyProgramEntityResponse
  user: UsersPermissionsUserEntityResponse
  person: PersonEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type LecturerEntity {
  id: ID
  attributes: Lecturer
}

type LecturerEntityResponse {
  data: LecturerEntity
}

type LecturerEntityResponseCollection {
  data: [LecturerEntity!]!
  meta: ResponseCollectionMeta!
}

type LecturerRelationResponseCollection {
  data: [LecturerEntity!]!
}

input PersonFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  identity: StringFilterInput
  idType: StringFilterInput
  companies: CompanyFiltersInput
  documents: DocumentFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [PersonFiltersInput]
  or: [PersonFiltersInput]
  not: PersonFiltersInput
}

input PersonInput {
  name: String
  identity: String
  idType: String
  companies: [ID]
  documents: [ID]
  photo: ID
  publishedAt: DateTime
}

type Person {
  name: String!
  identity: String!
  idType: String!
  companies(
    filters: CompanyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CompanyRelationResponseCollection
  documents(
    filters: DocumentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DocumentRelationResponseCollection
  photo: UploadFileEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type PersonEntity {
  id: ID
  attributes: Person
}

type PersonEntityResponse {
  data: PersonEntity
}

type PersonEntityResponseCollection {
  data: [PersonEntity!]!
  meta: ResponseCollectionMeta!
}

type PersonRelationResponseCollection {
  data: [PersonEntity!]!
}

enum ENUM_PROJECT_STEP {
  PROPOSAL
  OJT
  REPORT
  PRESENTATION
  REVISION
}

input ProjectFiltersInput {
  id: IDFilterInput
  company: CompanyFiltersInput
  students: StudentFiltersInput
  step: StringFilterInput
  documents: DocumentFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ProjectFiltersInput]
  or: [ProjectFiltersInput]
  not: ProjectFiltersInput
}

input ProjectInput {
  company: ID
  students: [ID]
  step: ENUM_PROJECT_STEP
  documents: [ID]
  publishedAt: DateTime
}

type Project {
  company: CompanyEntityResponse
  students(
    filters: StudentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): StudentRelationResponseCollection
  step: ENUM_PROJECT_STEP
  documents(
    filters: DocumentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DocumentRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ProjectEntity {
  id: ID
  attributes: Project
}

type ProjectEntityResponse {
  data: ProjectEntity
}

type ProjectEntityResponseCollection {
  data: [ProjectEntity!]!
  meta: ResponseCollectionMeta!
}

type ProjectRelationResponseCollection {
  data: [ProjectEntity!]!
}

input StudentFiltersInput {
  id: IDFilterInput
  class: StringFilterInput
  year: StringFilterInput
  studyProgram: StudyProgramFiltersInput
  projects: ProjectFiltersInput
  user: UsersPermissionsUserFiltersInput
  person: PersonFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [StudentFiltersInput]
  or: [StudentFiltersInput]
  not: StudentFiltersInput
}

input StudentInput {
  class: String
  year: String
  studyProgram: ID
  projects: [ID]
  user: ID
  person: ID
  publishedAt: DateTime
}

type Student {
  class: String
  year: String
  studyProgram: StudyProgramEntityResponse
  projects(
    filters: ProjectFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ProjectRelationResponseCollection
  user: UsersPermissionsUserEntityResponse
  person: PersonEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type StudentEntity {
  id: ID
  attributes: Student
}

type StudentEntityResponse {
  data: StudentEntity
}

type StudentEntityResponseCollection {
  data: [StudentEntity!]!
  meta: ResponseCollectionMeta!
}

type StudentRelationResponseCollection {
  data: [StudentEntity!]!
}

input StudyProgramFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  department: DepartmentFiltersInput
  lecturers: LecturerFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [StudyProgramFiltersInput]
  or: [StudyProgramFiltersInput]
  not: StudyProgramFiltersInput
}

input StudyProgramInput {
  name: String
  department: ID
  lecturers: [ID]
  publishedAt: DateTime
}

type StudyProgram {
  name: String
  department: DepartmentEntityResponse
  lecturers(
    filters: LecturerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): LecturerRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type StudyProgramEntity {
  id: ID
  attributes: StudyProgram
}

type StudyProgramEntityResponse {
  data: StudyProgramEntity
}

type StudyProgramEntityResponseCollection {
  data: [StudyProgramEntity!]!
  meta: ResponseCollectionMeta!
}

union GenericMorph =
    UploadFile
  | UploadFolder
  | I18NLocale
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | Company
  | Department
  | DocAction
  | DocLog
  | DocStatus
  | Document
  | Lecturer
  | Person
  | Project
  | Student
  | StudyProgram

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  company(id: ID): CompanyEntityResponse
  companies(
    filters: CompanyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CompanyEntityResponseCollection
  department(id: ID): DepartmentEntityResponse
  departments(
    filters: DepartmentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DepartmentEntityResponseCollection
  docAction(id: ID): DocActionEntityResponse
  docActions(
    filters: DocActionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DocActionEntityResponseCollection
  docLog(id: ID): DocLogEntityResponse
  docLogs(
    filters: DocLogFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DocLogEntityResponseCollection
  docStatus(id: ID): DocStatusEntityResponse
  docStatuses(
    filters: DocStatusFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DocStatusEntityResponseCollection
  document(id: ID): DocumentEntityResponse
  documents(
    filters: DocumentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DocumentEntityResponseCollection
  lecturer(id: ID): LecturerEntityResponse
  lecturers(
    filters: LecturerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): LecturerEntityResponseCollection
  person(id: ID): PersonEntityResponse
  people(
    filters: PersonFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PersonEntityResponseCollection
  project(id: ID): ProjectEntityResponse
  projects(
    filters: ProjectFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ProjectEntityResponseCollection
  student(id: ID): StudentEntityResponse
  students(
    filters: StudentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): StudentEntityResponseCollection
  studyProgram(id: ID): StudyProgramEntityResponse
  studyPrograms(
    filters: StudyProgramFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): StudyProgramEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  updateUploadFolder(
    id: ID!
    data: UploadFolderInput!
  ): UploadFolderEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  createCompany(data: CompanyInput!): CompanyEntityResponse
  updateCompany(id: ID!, data: CompanyInput!): CompanyEntityResponse
  deleteCompany(id: ID!): CompanyEntityResponse
  createDepartment(data: DepartmentInput!): DepartmentEntityResponse
  updateDepartment(id: ID!, data: DepartmentInput!): DepartmentEntityResponse
  deleteDepartment(id: ID!): DepartmentEntityResponse
  createDocAction(data: DocActionInput!): DocActionEntityResponse
  updateDocAction(id: ID!, data: DocActionInput!): DocActionEntityResponse
  deleteDocAction(id: ID!): DocActionEntityResponse
  createDocLog(data: DocLogInput!): DocLogEntityResponse
  updateDocLog(id: ID!, data: DocLogInput!): DocLogEntityResponse
  deleteDocLog(id: ID!): DocLogEntityResponse
  createDocStatus(data: DocStatusInput!): DocStatusEntityResponse
  updateDocStatus(id: ID!, data: DocStatusInput!): DocStatusEntityResponse
  deleteDocStatus(id: ID!): DocStatusEntityResponse
  createDocument(data: DocumentInput!): DocumentEntityResponse
  updateDocument(id: ID!, data: DocumentInput!): DocumentEntityResponse
  deleteDocument(id: ID!): DocumentEntityResponse
  createLecturer(data: LecturerInput!): LecturerEntityResponse
  updateLecturer(id: ID!, data: LecturerInput!): LecturerEntityResponse
  deleteLecturer(id: ID!): LecturerEntityResponse
  createPerson(data: PersonInput!): PersonEntityResponse
  updatePerson(id: ID!, data: PersonInput!): PersonEntityResponse
  deletePerson(id: ID!): PersonEntityResponse
  createProject(data: ProjectInput!): ProjectEntityResponse
  updateProject(id: ID!, data: ProjectInput!): ProjectEntityResponse
  deleteProject(id: ID!): ProjectEntityResponse
  createStudent(data: StudentInput!): StudentEntityResponse
  updateStudent(id: ID!, data: StudentInput!): StudentEntityResponse
  deleteStudent(id: ID!): StudentEntityResponse
  createStudyProgram(data: StudyProgramInput!): StudyProgramEntityResponse
  updateStudyProgram(
    id: ID!
    data: StudyProgramInput!
  ): StudyProgramEntityResponse
  deleteStudyProgram(id: ID!): StudyProgramEntityResponse
  upload(
    refId: ID
    ref: String
    field: String
    info: FileInfoInput
    file: Upload!
  ): UploadFileEntityResponse!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    files: [Upload]!
  ): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse

  # Create a new role
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  # Update an existing role
  updateUsersPermissionsRole(
    id: ID!
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsUpdateRolePayload

  # Delete an existing role
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  # Create a new user
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  updateUsersPermissionsUser(
    id: ID!
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Delete an existing user
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  # Register a user
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  # Request a reset password token
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  # Reset user password. Confirm with a code (resetToken from forgotPassword)
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload

  # Change user password. Confirm with the current password.
  changePassword(
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload

  # Confirm an email users email address
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
